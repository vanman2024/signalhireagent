[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "signalhire-agent"
version = "0.4.4"
description = "AI-powered lead generation automation for SignalHire with multi-platform expansion capabilities"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "SignalHire Agent Team", email = "team@signalhire-agent.com"},
]
keywords = ["signalhire", "lead-generation", "automation", "sales", "prospecting"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core async HTTP client
    "httpx>=0.25.0",

    # Data validation and models
    "pydantic>=2.0.0",

    # Web framework for callback server
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",

    # Data processing and CSV export
    "pandas>=2.0.0",

    # CLI framework
    "click>=8.1.0",
    "rich>=13.0.0",  # Beautiful terminal output

    # Configuration management
    "python-dotenv>=1.0.0",

    # Logging and monitoring
    "structlog>=23.0.0",

    # Async utilities
    "asyncio-throttle>=1.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "httpx[test]>=0.25.0",

    # Linting and formatting
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.0.0",

    # Type stubs
    "types-click>=7.1.0",
    "pandas-stubs>=2.0.0",
]

enterprise = [
    # Database for multi-tenant SaaS (future)
    "asyncpg>=0.28.0",
    "sqlalchemy>=2.0.0",

    # Redis for caching and sessions (future)
    "redis>=4.6.0",

    # Advanced authentication (future)
    "pyjwt>=2.8.0",
    "passlib[bcrypt]>=1.7.0",

    # Monitoring and observability (future)
    "prometheus-client>=0.17.0",
    "sentry-sdk>=1.32.0",
]

all = [
    "signalhire-agent[dev,enterprise]"
]

[project.urls]
Homepage = "https://github.com/signalhire-agent/signalhire-agent"
Repository = "https://github.com/signalhire-agent/signalhire-agent"
Documentation = "https://docs.signalhire-agent.com"
"Bug Tracker" = "https://github.com/signalhire-agent/signalhire-agent/issues"

[project.scripts]
signalhire-agent = "cli.main:main"

[project.entry-points."pip_install_hooks"]
post_install = "cli.setup:post_install"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pytest.ini_options]
minversion = "0.4.0"
addopts = "-ra -q --strict-markers --strict-config"
python_files = [
    "test_api_client_enhanced.py",
    "test_cli_api_first.py",
    "test_csv_export_enhanced.py",
    "test_rate_limiter_enhanced.py",
    "test_live_api.py",
]
testpaths = ["backend-tests"]
markers = [
    "contract: API contract tests",
    "integration: Integration tests requiring real services",
    "unit: Unit tests for individual components",
    "performance: Performance and load tests",
    "browser: Tests requiring browser automation",
    "slow: Tests that take more than 5 seconds",
    "asyncio: Async test marker",
    "live: Tests requiring real API credentials and live endpoints",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "N",   # pep8-naming
    "A",   # flake8-builtins
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "PIE", # flake8-pie
    "RET", # flake8-return
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
    "FBT001", # boolean positional arg in function definition
    "FBT002", # boolean default positional argument
    "FBT003", # boolean positional arg in function call
]

[tool.ruff.per-file-ignores]
"backend-tests/**/*" = ["ARG", "S101", "S106"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
show_error_codes = true
show_column_numbers = true
error_summary = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
module = [
    "stagehand.*",
    "asyncio_throttle.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "backend-tests.*",
]
check_untyped_defs = false
disallow_untyped_defs = false

[tool.black]
target-version = ['py311']
line-length = 88
skip-string-normalization = true

[tool.coverage.run]
source = ["src"]
omit = ["*/backend-tests/*", "*/frontend-tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
