name: Auto-Update Deployed Projects

on:
  # Run on push to main
  push:
    branches: [main]
    paths:
      - '.multiagent/docs/**'
      - '.multiagent/templates/**'
      - 'VERSION'
  
  # Run weekly
  schedule:
    - cron: '0 3 * * 1'  # Every Monday at 3 AM
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      project:
        description: 'Specific project to update (leave empty for all)'
        required: false

jobs:
  update-projects:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install multiagent-core
        run: |
          pip install pipx
          pipx install multiagent-core
      
      - name: Read project registry
        id: registry
        run: |
          if [ -f .multiagent/core/deployed-projects-registry.json ]; then
            echo "registry=$(cat .multiagent/core/deployed-projects-registry.json)" >> $GITHUB_OUTPUT
          else
            echo "registry=[]" >> $GITHUB_OUTPUT
          fi
      
      - name: Trigger updates in projects
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Parse registry and trigger updates
          echo "${{ steps.registry.outputs.registry }}" | python3 -c "
          import json
          import sys
          import os
          import subprocess
          
          registry = json.load(sys.stdin)
          
          for project in registry:
              if project.get('autoUpdate', False):
                  owner = project['owner']
                  repo = project['repo']
                  
                  # Trigger workflow dispatch in target repo
                  cmd = [
                      'gh', 'workflow', 'run',
                      'multiagent-update.yml',
                      '--repo', f'{owner}/{repo}'
                  ]
                  
                  print(f'Triggering update for {owner}/{repo}')
                  try:
                      subprocess.run(cmd, check=True)
                      print(f'✅ Triggered update for {owner}/{repo}')
                  except:
                      print(f'❌ Failed to trigger {owner}/{repo}')
          "