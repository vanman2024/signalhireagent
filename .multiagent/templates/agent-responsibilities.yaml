# MultiAgent Development Framework - Agent Responsibilities Matrix
# Defines roles, capabilities, and coordination patterns for AI agents

agents:
  claude:
    role: "CTO-Level Technical Leader & Strategic Guide"
    primary_responsibilities:
      - architecture: "System design, technical decisions, integration planning"
      - security: "Security reviews, authentication systems, vulnerability analysis"
      - integration: "Cross-system coordination, API design, service orchestration"
      - strategic_decisions: "Technology choices, project direction, quality gates"
      - code_review: "Final review and approval of all agent work"
      - conflict_resolution: "Resolve technical disputes, merge conflicts"
    
    complexity_level: "high-critical"
    scope: "cross-system, project-wide"
    
    specializations:
      - "Complex problem solving requiring multiple system knowledge"
      - "Architecture decisions affecting scalability and maintainability"
      - "Security-critical implementations and reviews"
      - "Integration between multiple services/APIs"
      - "Quality assurance and production readiness"
      
    coordination_role:
      - "Reviews and approves all PRs from other agents"
      - "Makes final decisions on conflicting approaches"
      - "Coordinates worktree merges and integration"
      - "Ensures consistency across agent outputs"
      
    task_assignment_patterns:
      - "T0XX @claude Architecture decisions"
      - "T0XX @claude Security implementation" 
      - "T0XX @claude Complex integration"
      - "T0XX @claude System design"
      
    handoff_to:
      - codex: "Frontend implementation after backend API design"
      - copilot: "Simple implementation after architecture decisions"
      - qwen: "Performance optimization after feature completion"
      - gemini: "Documentation after system completion"

  codex:
    role: "Full-Stack Development Specialist with Frontend Expertise"
    primary_responsibilities:
      - frontend: "React components, UI/UX design, responsive layouts"
      - full_stack: "End-to-end feature development, API integration"
      - interactive_features: "User interactions, real-time updates, animations"
      - component_design: "Reusable components, design systems"
      - user_experience: "Accessibility, usability, cross-browser compatibility"
      
    complexity_level: "medium-high"
    scope: "user-facing, interactive, full-stack"
    
    specializations:
      - "React/Next.js development with modern patterns"
      - "CSS/Tailwind styling and responsive design"
      - "TypeScript/JavaScript advanced patterns"
      - "State management (Redux, Zustand, Context)"
      - "API integration and data flow"
      - "Interactive development and real-time features"
      
    tools_and_frameworks:
      - react: "Functional components, hooks, custom hooks"
      - styling: "Tailwind CSS, styled-components, CSS modules"
      - testing: "Jest, React Testing Library, Playwright"
      - bundling: "Vite, Webpack, build optimization"
      - apis: "REST, GraphQL, WebSocket integration"
      
    task_assignment_patterns:
      - "T0XX @codex Create responsive component"
      - "T0XX @codex Implement user interface"
      - "T0XX @codex Frontend integration"
      - "T0XX @codex Interactive feature development"
      
    handoff_from:
      - claude: "Backend APIs ready for frontend integration"
      - copilot: "Backend models/endpoints need frontend"
      - gemini: "UI requirements documented and analyzed"
      
    handoff_to:
      - qwen: "Performance optimization of frontend code"
      - gemini: "Documentation of component usage"
      - claude: "Integration testing and deployment"

  copilot:
    role: "Backend Implementation & API Development Specialist"
    primary_responsibilities:
      - backend_implementation: "Server logic, business rules, data processing"
      - api_development: "REST APIs, GraphQL endpoints, webhook handlers"
      - database_operations: "CRUD operations, schema implementation, migrations"
      - server_logic: "Authentication, authorization, middleware"
      - data_processing: "ETL pipelines, data validation, transformations"
      
    complexity_level: "low-medium"
    scope: "server-side, data-layer, business-logic"
    
    specializations:
      - "FastAPI/Django REST framework development"
      - "Database design and ORM usage (SQLAlchemy, Django ORM)"
      - "Authentication and authorization implementation"
      - "Background tasks and job queues"
      - "API documentation and testing"
      
    tools_and_frameworks:
      - apis: "FastAPI, Django REST, Flask"
      - databases: "PostgreSQL, SQLite, Redis caching"
      - orm: "SQLAlchemy, Django ORM, Alembic migrations"
      - testing: "pytest, unittest, API testing"
      - deployment: "Docker, uvicorn, gunicorn"
      
    task_assignment_patterns:
      - "T0XX @copilot Implement API endpoint"
      - "T0XX @copilot Create database model"
      - "T0XX @copilot Backend CRUD operations"
      - "T0XX @copilot Authentication implementation"
      
    handoff_from:
      - claude: "Architecture and database schema designed"
      - gemini: "Requirements documented and analyzed"
      
    handoff_to:
      - codex: "APIs ready for frontend integration"
      - qwen: "Backend code ready for optimization"
      - claude: "Complex integration or security review needed"

  qwen:
    role: "Performance Optimization & Algorithm Specialist"
    primary_responsibilities:
      - performance_optimization: "Speed improvements, bottleneck elimination"
      - algorithm_improvement: "Efficiency enhancements, complexity reduction"
      - database_optimization: "Query optimization, indexing, connection pooling"
      - caching_strategies: "Redis, in-memory caching, CDN optimization"
      - resource_efficiency: "Memory usage, CPU optimization, scalability"
      
    complexity_level: "medium"
    scope: "performance-critical-paths, optimization-focused"
    
    specializations:
      - "Database query optimization and profiling"
      - "Algorithm analysis and improvement"
      - "Caching strategy implementation"
      - "Memory and CPU profiling"
      - "Load testing and performance monitoring"
      
    tools_and_frameworks:
      - profiling: "cProfile, memory_profiler, py-spy"
      - databases: "Query optimization, index analysis, EXPLAIN plans"
      - caching: "Redis, Memcached, application-level caching"
      - monitoring: "Performance metrics, bottleneck identification"
      - testing: "Load testing, benchmark comparisons"
      
    task_assignment_patterns:
      - "T0XX @qwen Optimize database queries"
      - "T0XX @qwen Performance bottleneck analysis"
      - "T0XX @qwen Algorithm efficiency improvement"
      - "T0XX @qwen Caching implementation"
      
    handoff_from:
      - claude: "Working implementation ready for optimization"
      - copilot: "Backend code with performance issues"
      - codex: "Frontend performance optimization needed"
      
    handoff_to:
      - gemini: "Performance improvements to document"
      - claude: "Optimization results for architecture review"

  gemini:
    role: "Research, Documentation & Large-Scale Analysis Specialist"
    primary_responsibilities:
      - research: "Technology evaluation, best practices analysis"
      - documentation: "API docs, user guides, technical specifications"
      - large_scale_analysis: "Codebase analysis, pattern detection"
      - cross_file_patterns: "Architecture analysis, dependency mapping"
      - knowledge_synthesis: "Research compilation, decision support"
      
    complexity_level: "research-intensive"
    scope: "project-wide-documentation, analysis, research"
    
    specializations:
      - "Large codebase analysis (2M token context window)"
      - "Technical documentation generation"
      - "API documentation and examples"
      - "Research and technology evaluation"
      - "Pattern detection across multiple files"
      - "Integration testing documentation"
      
    tools_and_frameworks:
      - analysis: "Large context window for comprehensive analysis"
      - documentation: "Markdown, OpenAPI specs, diagrams"
      - research: "Technology comparison, best practices"
      - testing: "Cross-browser testing documentation"
      - integration: "Multi-service analysis and documentation"
      
    task_assignment_patterns:
      - "T0XX @gemini Research caching strategies"
      - "T0XX @gemini Document API endpoints"
      - "T0XX @gemini Analyze system architecture"
      - "T0XX @gemini Performance analysis report"
      
    handoff_from:
      - claude: "System architecture ready for documentation"
      - copilot: "APIs implemented, need documentation"
      - qwen: "Performance improvements to document"
      - codex: "Frontend components need usage docs"
      
    handoff_to:
      - claude: "Research complete, decisions needed"
      - codex: "Requirements documented, UI implementation needed"
      - copilot: "API requirements documented, implementation needed"

# Workflow Coordination Patterns
coordination_patterns:
  typical_flow:
    - phase_1: "Research & Analysis (@gemini)"
    - phase_2: "Architecture & Design (@claude)"  
    - phase_3: "Backend Implementation (@copilot)"
    - phase_4: "Frontend Implementation (@codex)"
    - phase_5: "Performance Optimization (@qwen)"
    - phase_6: "Final Integration & Review (@claude)"
    
  parallel_development:
    backend_track: ["@claude (architecture)", "@copilot (implementation)", "@qwen (optimization)"]
    frontend_track: ["@claude (API design)", "@codex (implementation)", "@qwen (optimization)"]
    documentation_track: ["@gemini (research)", "@gemini (documentation)", "@gemini (analysis)"]
    
  handoff_triggers:
    to_claude: "@claude injection in final commit for AgentSwarm integration"
    dependency_complete: "Mark tasks complete with [x] for team visibility"
    pr_creation: "Create PR after @claude injection for automated review routing"

# Task Assignment Rules
task_assignment:
  complexity_routing:
    low: "@copilot - Simple implementation, CRUD operations"
    medium: "@qwen - Optimization, @codex - Feature development" 
    high: "@claude - Architecture, security, integration"
    research: "@gemini - Analysis, documentation, evaluation"
    
  scope_routing:
    single_file: "Any agent with appropriate skill"
    multi_file: "@claude for coordination, @gemini for analysis"
    cross_system: "@claude for integration decisions"
    performance: "@qwen for optimization focus"
    
  specialization_routing:
    ui_ux: "@codex - User interface and experience"
    api_backend: "@copilot - Server-side implementation"
    database: "@copilot for implementation, @qwen for optimization"
    security: "@claude - Security reviews and implementation"
    docs: "@gemini - Documentation and analysis"